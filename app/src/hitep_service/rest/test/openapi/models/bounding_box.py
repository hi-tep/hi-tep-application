from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi.models.base_model import Model
from openapi.models.coordinate import Coordinate
from openapi import util

from openapi.models.coordinate import Coordinate  # noqa: E501

class BoundingBox(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bottom_left=None, top_right=None):  # noqa: E501
        """BoundingBox - a model defined in OpenAPI

        :param bottom_left: The bottom_left of this BoundingBox.  # noqa: E501
        :type bottom_left: Coordinate
        :param top_right: The top_right of this BoundingBox.  # noqa: E501
        :type top_right: Coordinate
        """
        self.openapi_types = {
            'bottom_left': Coordinate,
            'top_right': Coordinate
        }

        self.attribute_map = {
            'bottom_left': 'bottomLeft',
            'top_right': 'topRight'
        }

        self._bottom_left = bottom_left
        self._top_right = top_right

    @classmethod
    def from_dict(cls, dikt) -> 'BoundingBox':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BoundingBox of this BoundingBox.  # noqa: E501
        :rtype: BoundingBox
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bottom_left(self) -> Coordinate:
        """Gets the bottom_left of this BoundingBox.


        :return: The bottom_left of this BoundingBox.
        :rtype: Coordinate
        """
        return self._bottom_left

    @bottom_left.setter
    def bottom_left(self, bottom_left: Coordinate):
        """Sets the bottom_left of this BoundingBox.


        :param bottom_left: The bottom_left of this BoundingBox.
        :type bottom_left: Coordinate
        """
        if bottom_left is None:
            raise ValueError("Invalid value for `bottom_left`, must not be `None`")  # noqa: E501

        self._bottom_left = bottom_left

    @property
    def top_right(self) -> Coordinate:
        """Gets the top_right of this BoundingBox.


        :return: The top_right of this BoundingBox.
        :rtype: Coordinate
        """
        return self._top_right

    @top_right.setter
    def top_right(self, top_right: Coordinate):
        """Sets the top_right of this BoundingBox.


        :param top_right: The top_right of this BoundingBox.
        :type top_right: Coordinate
        """
        if top_right is None:
            raise ValueError("Invalid value for `top_right`, must not be `None`")  # noqa: E501

        self._top_right = top_right
