from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from hitep.openapi_server.models.base_model import Model
from hitep.openapi_server.models.entity import Entity
from hitep.openapi_server.models.model3_d_coordinate import Model3DCoordinate
from hitep.openapi_server import util

from hitep.openapi_server.models.entity import Entity  # noqa: E501
from hitep.openapi_server.models.model3_d_coordinate import Model3DCoordinate  # noqa: E501

class GazeDetection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, position=None, painting=None, distance=None, entities=None, start=None, end=None):  # noqa: E501
        """GazeDetection - a model defined in OpenAPI

        :param position: The position of this GazeDetection.  # noqa: E501
        :type position: Model3DCoordinate
        :param painting: The painting of this GazeDetection.  # noqa: E501
        :type painting: str
        :param distance: The distance of this GazeDetection.  # noqa: E501
        :type distance: float
        :param entities: The entities of this GazeDetection.  # noqa: E501
        :type entities: List[Entity]
        :param start: The start of this GazeDetection.  # noqa: E501
        :type start: datetime
        :param end: The end of this GazeDetection.  # noqa: E501
        :type end: datetime
        """
        self.openapi_types = {
            'position': Model3DCoordinate,
            'painting': str,
            'distance': float,
            'entities': List[Entity],
            'start': str,
            'end': datetime
        }

        self.attribute_map = {
            'position': 'position',
            'painting': 'painting',
            'distance': 'distance',
            'entities': 'entities',
            'start': 'start',
            'end': 'end'
        }

        self._position = position
        self._painting = painting
        self._distance = distance
        self._entities = entities
        self._start = start
        self._end = end

    @classmethod
    def from_dict(cls, dikt) -> 'GazeDetection':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GazeDetection of this GazeDetection.  # noqa: E501
        :rtype: GazeDetection
        """
        return util.deserialize_model(dikt, cls)

    @property
    def position(self) -> Model3DCoordinate:
        """Gets the position of this GazeDetection.


        :return: The position of this GazeDetection.
        :rtype: Model3DCoordinate
        """
        return self._position

    @position.setter
    def position(self, position: Model3DCoordinate):
        """Sets the position of this GazeDetection.


        :param position: The position of this GazeDetection.
        :type position: Model3DCoordinate
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")  # noqa: E501

        self._position = position

    @property
    def painting(self) -> str:
        """Gets the painting of this GazeDetection.

        IRI of the painting that is the target of the user gaze  # noqa: E501

        :return: The painting of this GazeDetection.
        :rtype: str
        """
        return self._painting

    @painting.setter
    def painting(self, painting: str):
        """Sets the painting of this GazeDetection.

        IRI of the painting that is the target of the user gaze  # noqa: E501

        :param painting: The painting of this GazeDetection.
        :type painting: str
        """
        if painting is None:
            raise ValueError("Invalid value for `painting`, must not be `None`")  # noqa: E501

        self._painting = painting

    @property
    def distance(self) -> float:
        """Gets the distance of this GazeDetection.

        Distance of the user to the painting during the gaze in meters  # noqa: E501

        :return: The distance of this GazeDetection.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance: float):
        """Sets the distance of this GazeDetection.

        Distance of the user to the painting during the gaze in meters  # noqa: E501

        :param distance: The distance of this GazeDetection.
        :type distance: float
        """
        if distance is None:
            raise ValueError("Invalid value for `distance`, must not be `None`")  # noqa: E501

        self._distance = distance

    @property
    def entities(self) -> List[Entity]:
        """Gets the entities of this GazeDetection.

        IRIs of the entities that are target of the user gaze  # noqa: E501

        :return: The entities of this GazeDetection.
        :rtype: List[Entity]
        """
        return self._entities

    @entities.setter
    def entities(self, entities: List[Entity]):
        """Sets the entities of this GazeDetection.

        IRIs of the entities that are target of the user gaze  # noqa: E501

        :param entities: The entities of this GazeDetection.
        :type entities: List[Entity]
        """
        if entities is None:
            raise ValueError("Invalid value for `entities`, must not be `None`")  # noqa: E501

        self._entities = entities

    @property
    def start(self) -> datetime:
        """Gets the start of this GazeDetection.

        Start date of the gaze detection  # noqa: E501

        :return: The start of this GazeDetection.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start: str):
        """Sets the start of this GazeDetection.

        Start date of the gaze detection  # noqa: E501

        :param start: The start of this GazeDetection.
        :type start: datetime
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = datetime.fromisoformat(start.replace('Z', '+00:00')) if start else None

    @property
    def end(self) -> datetime:
        """Gets the end of this GazeDetection.

        End date of the gaze detection, if omitted, the end date will be assumed to be equal to the start date  # noqa: E501

        :return: The end of this GazeDetection.
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end: datetime):
        """Sets the end of this GazeDetection.

        End date of the gaze detection, if omitted, the end date will be assumed to be equal to the start date  # noqa: E501

        :param end: The end of this GazeDetection.
        :type end: datetime
        """

        self._end = end
