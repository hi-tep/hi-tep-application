from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from hitep.openapi_server.models.base_model import Model
from hitep.openapi_server import util


class ScenarioContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, location=None, user=None, start=None, end=None):  # noqa: E501
        """ScenarioContext - a model defined in OpenAPI

        :param id: The id of this ScenarioContext.  # noqa: E501
        :type id: str
        :param location: The location of this ScenarioContext.  # noqa: E501
        :type location: str
        :param user: The user of this ScenarioContext.  # noqa: E501
        :type user: str
        :param start: The start of this ScenarioContext.  # noqa: E501
        :type start: datetime
        :param end: The end of this ScenarioContext.  # noqa: E501
        :type end: datetime
        """
        self.openapi_types = {
            'id': str,
            'location': str,
            'user': str,
            'start': datetime,
            'end': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'location': 'location',
            'user': 'user',
            'start': 'start',
            'end': 'end'
        }

        self._id = id
        self._location = location
        self._user = user
        self._start = start
        self._end = end

    @classmethod
    def from_dict(cls, dikt) -> 'ScenarioContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ScenarioContext of this ScenarioContext.  # noqa: E501
        :rtype: ScenarioContext
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ScenarioContext.

        The scenario identifier  # noqa: E501

        :return: The id of this ScenarioContext.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ScenarioContext.

        The scenario identifier  # noqa: E501

        :param id: The id of this ScenarioContext.
        :type id: str
        """

        self._id = id

    @property
    def location(self) -> str:
        """Gets the location of this ScenarioContext.

        IRI of the location where the session takes place  # noqa: E501

        :return: The location of this ScenarioContext.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location: str):
        """Sets the location of this ScenarioContext.

        IRI of the location where the session takes place  # noqa: E501

        :param location: The location of this ScenarioContext.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def user(self) -> str:
        """Gets the user of this ScenarioContext.

        IRI identifying the user  # noqa: E501

        :return: The user of this ScenarioContext.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user: str):
        """Sets the user of this ScenarioContext.

        IRI identifying the user  # noqa: E501

        :param user: The user of this ScenarioContext.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def start(self) -> datetime:
        """Gets the start of this ScenarioContext.

        Start date of the session  # noqa: E501

        :return: The start of this ScenarioContext.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start: datetime):
        """Sets the start of this ScenarioContext.

        Start date of the session  # noqa: E501

        :param start: The start of this ScenarioContext.
        :type start: datetime
        """

        self._start = start

    @property
    def end(self) -> datetime:
        """Gets the end of this ScenarioContext.

        Start date of the session  # noqa: E501

        :return: The end of this ScenarioContext.
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end: datetime):
        """Sets the end of this ScenarioContext.

        Start date of the session  # noqa: E501

        :param end: The end of this ScenarioContext.
        :type end: datetime
        """

        self._end = end
