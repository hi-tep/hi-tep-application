from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from hitep.openapi_server.models.base_model import Model
from hitep.openapi_server import util


class Utterance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, text=None, start=None, end=None):  # noqa: E501
        """Utterance - a model defined in OpenAPI

        :param id: The id of this Utterance.  # noqa: E501
        :type id: str
        :param text: The text of this Utterance.  # noqa: E501
        :type text: str
        :param start: The start of this Utterance.  # noqa: E501
        :type start: datetime
        :param end: The end of this Utterance.  # noqa: E501
        :type end: datetime
        """
        self.openapi_types = {
            'id': str,
            'text': str,
            'start': datetime,
            'end': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'text': 'text',
            'start': 'start',
            'end': 'end'
        }

        self._id = id
        self._text = text
        self._start = start
        self._end = end

    @classmethod
    def from_dict(cls, dikt) -> 'Utterance':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Utterance of this Utterance.  # noqa: E501
        :rtype: Utterance
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Utterance.

        A unique identifier of the utterance  # noqa: E501

        :return: The id of this Utterance.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Utterance.

        A unique identifier of the utterance  # noqa: E501

        :param id: The id of this Utterance.
        :type id: str
        """

        self._id = id

    @property
    def text(self) -> str:
        """Gets the text of this Utterance.


        :return: The text of this Utterance.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this Utterance.


        :param text: The text of this Utterance.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def start(self) -> datetime:
        """Gets the start of this Utterance.

        Start date of the utterance  # noqa: E501

        :return: The start of this Utterance.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start: datetime):
        """Sets the start of this Utterance.

        Start date of the utterance  # noqa: E501

        :param start: The start of this Utterance.
        :type start: datetime
        """

        self._start = start

    @property
    def end(self) -> datetime:
        """Gets the end of this Utterance.

        End date of the utterance, if empty the length of the utterance is not known  # noqa: E501

        :return: The end of this Utterance.
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end: datetime):
        """Sets the end of this Utterance.

        End date of the utterance, if empty the length of the utterance is not known  # noqa: E501

        :param end: The end of this Utterance.
        :type end: datetime
        """

        self._end = end
